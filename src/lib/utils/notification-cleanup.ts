import { prisma } from '@/lib/prisma';

/**
 * Limpa notifica√ß√µes lidas h√° mais de 1 hora
 * @returns Promise<{deletedCount: number}>
 */
export async function cleanupOldNotifications(): Promise<{ deletedCount: number }> {
    try {
        // Calcular a data limite (1 hora atr√°s)
        const oneHourAgo = new Date();
        oneHourAgo.setHours(oneHourAgo.getHours() - 1);

        // Deletar notifica√ß√µes lidas h√° mais de 1 hora
        const deletedNotifications = await prisma.notification.deleteMany({
            where: {
                read: true,
                readAt: {
                    lt: oneHourAgo, // Menor que 1 hora atr√°s
                },
            },
        });

        console.log(`üßπ Limpeza de notifica√ß√µes: ${deletedNotifications.count} notifica√ß√µes removidas`);

        return { deletedCount: deletedNotifications.count };

    } catch (error) {
        console.error('‚ùå Erro ao limpar notifica√ß√µes:', error);
        throw error;
    }
}

/**
 * Conta quantas notifica√ß√µes ser√£o removidas na pr√≥xima limpeza
 * @returns Promise<{count: number}>
 */
export async function countOldNotifications(): Promise<{ count: number }> {
    try {
        const oneHourAgo = new Date();
        oneHourAgo.setHours(oneHourAgo.getHours() - 1);

        const count = await prisma.notification.count({
            where: {
                read: true,
                readAt: {
                    lt: oneHourAgo,
                },
            },
        });

        return { count };

    } catch (error) {
        console.error('‚ùå Erro ao contar notifica√ß√µes antigas:', error);
        throw error;
    }
}
